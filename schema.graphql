# This file was generated. Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

"Indicates exactly one field must be supplied and this field must not be `null`."
directive @oneOf on INPUT_OBJECT

type Composer {
    AuthorImage: FileStorage
    MusicSheets: [SheetMusic!]
    _count: ComposerCount!
    authorImageId: String
    biography: String
    birthDate: DateTime
    createdAt: DateTime!
    id: ID!
    name: String!
    updatedAt: DateTime!
}

type ComposerCount {
    MusicSheets: Int!
}

type ComposerCountAggregate {
    _all: Int!
    authorImageId: Int!
    biography: Int!
    birthDate: Int!
    createdAt: Int!
    id: Int!
    name: Int!
    updatedAt: Int!
}

type ComposerMaxAggregate {
    authorImageId: String
    biography: String
    birthDate: DateTime
    createdAt: DateTime
    id: String
    name: String
    updatedAt: DateTime
}

type ComposerMinAggregate {
    authorImageId: String
    biography: String
    birthDate: DateTime
    createdAt: DateTime
    id: String
    name: String
    updatedAt: DateTime
}

type CreateComposerDto {
    biography: String!
    birthDate: DateTime
    name: String!
}

type Favorites {
    SheetMusic: SheetMusic!
    User: User!
    addedAt: DateTime!
    sheetMusicId: Int!
    userId: String!
}

type FavoritesAvgAggregate {
    sheetMusicId: Float
}

type FavoritesCountAggregate {
    _all: Int!
    addedAt: Int!
    sheetMusicId: Int!
    userId: Int!
}

type FavoritesMaxAggregate {
    addedAt: DateTime
    sheetMusicId: Int
    userId: String
}

type FavoritesMinAggregate {
    addedAt: DateTime
    sheetMusicId: Int
    userId: String
}

type FavoritesSumAggregate {
    sheetMusicId: Int
}

type FileStorage {
    Composers: [Composer!]
    SheetMusics: [SheetMusic!]
    Thumbnails: [SheetMusic!]
    _count: FileStorageCount!
    bucket: String!
    createdAt: DateTime!
    fileCompleteUrl: String!
    fileKey: String!
    id: ID!
    updatedAt: DateTime!
}

type FileStorageCount {
    Composers: Int!
    SheetMusics: Int!
    Thumbnails: Int!
}

type FileStorageCountAggregate {
    _all: Int!
    bucket: Int!
    createdAt: Int!
    fileCompleteUrl: Int!
    fileKey: Int!
    id: Int!
    updatedAt: Int!
}

type FileStorageMaxAggregate {
    bucket: String
    createdAt: DateTime
    fileCompleteUrl: String
    fileKey: String
    id: String
    updatedAt: DateTime
}

type FileStorageMinAggregate {
    bucket: String
    createdAt: DateTime
    fileCompleteUrl: String
    fileKey: String
    id: String
    updatedAt: DateTime
}

type LoginUserDto {
    accessToken: String!
    name: String!
    phoneNumber: String!
}

type Mutation {
    createComposer(composerData: CreateComposerCommand!, imageComposer: Upload!): CreateComposerDto!
    loginUser(loginData: LoginCommand!): LoginUserDto!
    registerUser(registerUserData: RegisterCommand!): RegisterUserDto!
    uploadFile(files: Upload!): User!
}

type Query {
    composer(filtering: ComposerWhereUniqueInput!): [Composer!]!
    composers(filtering: ComposerWhereInput!): [Composer!]!
    workingStatus: String!
}

type RegisterUserDto {
    name: String!
    phoneNumber: String!
}

type SheetMusic {
    Composer: Composer!
    UploadedBy: User!
    _count: SheetMusicCount!
    arranger: String
    composerId: String!
    createdAt: DateTime!
    description: String
    difficulty: String
    favorites: [Favorites!]
    fileId: String!
    genre: String
    id: ID!
    instrument: String!
    numberOfDownloads: Int!
    sheetFile: FileStorage!
    slug: String
    thumbnail: FileStorage!
    thumbnailId: String!
    title: String!
    updatedAt: DateTime!
    uploadedById: String!
    year: String
}

type SheetMusicAvgAggregate {
    id: Float
    numberOfDownloads: Float
}

type SheetMusicCount {
    favorites: Int!
}

type SheetMusicCountAggregate {
    _all: Int!
    arranger: Int!
    composerId: Int!
    createdAt: Int!
    description: Int!
    difficulty: Int!
    fileId: Int!
    genre: Int!
    id: Int!
    instrument: Int!
    numberOfDownloads: Int!
    slug: Int!
    thumbnailId: Int!
    title: Int!
    updatedAt: Int!
    uploadedById: Int!
    year: Int!
}

type SheetMusicMaxAggregate {
    arranger: String
    composerId: String
    createdAt: DateTime
    description: String
    difficulty: String
    fileId: String
    genre: String
    id: Int
    instrument: String
    numberOfDownloads: Int
    slug: String
    thumbnailId: String
    title: String
    updatedAt: DateTime
    uploadedById: String
    year: String
}

type SheetMusicMinAggregate {
    arranger: String
    composerId: String
    createdAt: DateTime
    description: String
    difficulty: String
    fileId: String
    genre: String
    id: Int
    instrument: String
    numberOfDownloads: Int
    slug: String
    thumbnailId: String
    title: String
    updatedAt: DateTime
    uploadedById: String
    year: String
}

type SheetMusicSumAggregate {
    id: Int
    numberOfDownloads: Int
}

type User {
    FileUploaded: [SheetMusic!]
    _count: UserCount!
    biography: String!
    createdAt: DateTime!
    favorites: [Favorites!]
    id: ID!
    name: String
    password: String!
    phoneNumber: String!
    role: Roles!
    updatedAt: DateTime!
}

type UserCount {
    FileUploaded: Int!
    favorites: Int!
}

type UserCountAggregate {
    _all: Int!
    biography: Int!
    createdAt: Int!
    id: Int!
    name: Int!
    password: Int!
    phoneNumber: Int!
    role: Int!
    updatedAt: Int!
}

type UserMaxAggregate {
    biography: String
    createdAt: DateTime
    id: String
    name: String
    password: String
    phoneNumber: String
    role: Roles
    updatedAt: DateTime
}

type UserMinAggregate {
    biography: String
    createdAt: DateTime
    id: String
    name: String
    password: String
    phoneNumber: String
    role: Roles
    updatedAt: DateTime
}

enum QueryMode {
    default
    insensitive
}

enum Roles {
    ADMIN
    COMPOSER
    SUPERADMIN
    USER
}

"A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format."
scalar DateTime

"The `Upload` scalar type represents a file upload."
scalar Upload

input ComposerListRelationFilter {
    every: ComposerWhereInput
    none: ComposerWhereInput
    some: ComposerWhereInput
}

input ComposerRelationFilter {
    is: ComposerWhereInput
    isNot: ComposerWhereInput
}

input ComposerWhereInput {
    AND: [ComposerWhereInput!]
    AuthorImage: FileStorageNullableRelationFilter
    MusicSheets: SheetMusicListRelationFilter
    NOT: [ComposerWhereInput!]
    OR: [ComposerWhereInput!]
    authorImageId: StringNullableFilter
    biography: StringNullableFilter
    birthDate: DateTimeNullableFilter
    createdAt: DateTimeFilter
    id: StringFilter
    name: StringFilter
    updatedAt: DateTimeFilter
}

input ComposerWhereUniqueInput {
    AND: [ComposerWhereInput!]
    AuthorImage: FileStorageNullableRelationFilter
    MusicSheets: SheetMusicListRelationFilter
    NOT: [ComposerWhereInput!]
    OR: [ComposerWhereInput!]
    authorImageId: StringNullableFilter
    biography: StringNullableFilter
    birthDate: DateTime
    createdAt: DateTimeFilter
    id: String
    name: String
    updatedAt: DateTimeFilter
}

input CreateComposerCommand {
    biography: String!
    birthDate: DateTime
    composerImage: Upload
    name: String!
}

input DateTimeFilter {
    equals: DateTime
    gt: DateTime
    gte: DateTime
    in: [DateTime!]
    lt: DateTime
    lte: DateTime
    not: NestedDateTimeFilter
    notIn: [DateTime!]
}

input DateTimeNullableFilter {
    equals: DateTime
    gt: DateTime
    gte: DateTime
    in: [DateTime!]
    lt: DateTime
    lte: DateTime
    not: NestedDateTimeNullableFilter
    notIn: [DateTime!]
}

input EnumRolesFilter {
    equals: Roles
    in: [Roles!]
    not: NestedEnumRolesFilter
    notIn: [Roles!]
}

input FavoritesListRelationFilter {
    every: FavoritesWhereInput
    none: FavoritesWhereInput
    some: FavoritesWhereInput
}

input FavoritesWhereInput {
    AND: [FavoritesWhereInput!]
    NOT: [FavoritesWhereInput!]
    OR: [FavoritesWhereInput!]
    SheetMusic: SheetMusicRelationFilter
    User: UserRelationFilter
    addedAt: DateTimeFilter
    sheetMusicId: IntFilter
    userId: StringFilter
}

input FileStorageNullableRelationFilter {
    is: FileStorageWhereInput
    isNot: FileStorageWhereInput
}

input FileStorageRelationFilter {
    is: FileStorageWhereInput
    isNot: FileStorageWhereInput
}

input FileStorageWhereInput {
    AND: [FileStorageWhereInput!]
    Composers: ComposerListRelationFilter
    NOT: [FileStorageWhereInput!]
    OR: [FileStorageWhereInput!]
    SheetMusics: SheetMusicListRelationFilter
    Thumbnails: SheetMusicListRelationFilter
    bucket: StringFilter
    createdAt: DateTimeFilter
    fileCompleteUrl: StringFilter
    fileKey: StringFilter
    id: StringFilter
    updatedAt: DateTimeFilter
}

input IntFilter {
    equals: Int
    gt: Int
    gte: Int
    in: [Int!]
    lt: Int
    lte: Int
    not: NestedIntFilter
    notIn: [Int!]
}

input LoginCommand {
    password: String!
    phoneNumber: String!
}

input NestedDateTimeFilter {
    equals: DateTime
    gt: DateTime
    gte: DateTime
    in: [DateTime!]
    lt: DateTime
    lte: DateTime
    not: NestedDateTimeFilter
    notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
    equals: DateTime
    gt: DateTime
    gte: DateTime
    in: [DateTime!]
    lt: DateTime
    lte: DateTime
    not: NestedDateTimeNullableFilter
    notIn: [DateTime!]
}

input NestedEnumRolesFilter {
    equals: Roles
    in: [Roles!]
    not: NestedEnumRolesFilter
    notIn: [Roles!]
}

input NestedIntFilter {
    equals: Int
    gt: Int
    gte: Int
    in: [Int!]
    lt: Int
    lte: Int
    not: NestedIntFilter
    notIn: [Int!]
}

input NestedStringFilter {
    contains: String
    endsWith: String
    equals: String
    gt: String
    gte: String
    in: [String!]
    lt: String
    lte: String
    not: NestedStringFilter
    notIn: [String!]
    startsWith: String
}

input NestedStringNullableFilter {
    contains: String
    endsWith: String
    equals: String
    gt: String
    gte: String
    in: [String!]
    lt: String
    lte: String
    not: NestedStringNullableFilter
    notIn: [String!]
    startsWith: String
}

input RegisterCommand {
    name: String
    password: String!
    phoneNumber: String!
}

input SheetMusicListRelationFilter {
    every: SheetMusicWhereInput
    none: SheetMusicWhereInput
    some: SheetMusicWhereInput
}

input SheetMusicRelationFilter {
    is: SheetMusicWhereInput
    isNot: SheetMusicWhereInput
}

input SheetMusicWhereInput {
    AND: [SheetMusicWhereInput!]
    Composer: ComposerRelationFilter
    NOT: [SheetMusicWhereInput!]
    OR: [SheetMusicWhereInput!]
    UploadedBy: UserRelationFilter
    arranger: StringNullableFilter
    composerId: StringFilter
    createdAt: DateTimeFilter
    description: StringNullableFilter
    difficulty: StringNullableFilter
    favorites: FavoritesListRelationFilter
    fileId: StringFilter
    genre: StringNullableFilter
    id: IntFilter
    instrument: StringFilter
    numberOfDownloads: IntFilter
    sheetFile: FileStorageRelationFilter
    slug: StringNullableFilter
    thumbnail: FileStorageRelationFilter
    thumbnailId: StringFilter
    title: StringFilter
    updatedAt: DateTimeFilter
    uploadedById: StringFilter
    year: StringNullableFilter
}

input StringFilter {
    contains: String
    endsWith: String
    equals: String
    gt: String
    gte: String
    in: [String!]
    lt: String
    lte: String
    mode: QueryMode
    not: NestedStringFilter
    notIn: [String!]
    startsWith: String
}

input StringNullableFilter {
    contains: String
    endsWith: String
    equals: String
    gt: String
    gte: String
    in: [String!]
    lt: String
    lte: String
    mode: QueryMode
    not: NestedStringNullableFilter
    notIn: [String!]
    startsWith: String
}

input UserRelationFilter {
    is: UserWhereInput
    isNot: UserWhereInput
}

input UserWhereInput {
    AND: [UserWhereInput!]
    FileUploaded: SheetMusicListRelationFilter
    NOT: [UserWhereInput!]
    OR: [UserWhereInput!]
    biography: StringFilter
    createdAt: DateTimeFilter
    favorites: FavoritesListRelationFilter
    id: StringFilter
    name: StringNullableFilter
    password: StringFilter
    phoneNumber: StringFilter
    role: EnumRolesFilter
    updatedAt: DateTimeFilter
}
